CREATE TABLE `items` (
  `id` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `appid` INT(10) UNSIGNED NOT NULL DEFAULT 730 COMMENT 'Steam appid',
  `contextid` SMALLINT(6) NOT NULL DEFAULT 0 COMMENT 'Steam item contextid',
  `market_nameid` INT(11) NOT NULL DEFAULT 0,
  `latestSteamAnalystHistoryId` INT(11) UNSIGNED NOT NULL DEFAULT 0,
  `marketname` VARCHAR(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL COMMENT 'from the Steam item description',
  `market_hash_name` VARCHAR(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci NOT NULL DEFAULT '' COMMENT 'from the Steam item description. This version of the name is used on the Steam market',
  `replacedById` INT(255) DEFAULT NULL COMMENT 'If this item has been replaced by another, use the pricing from them instead of this and do not track SCM pricing for this',
  `iconpath` VARCHAR(1024) NOT NULL DEFAULT '' COMMENT 'Path of the icon in the Steam CDN',
  `isCommodity` TINYINT(4) DEFAULT NULL COMMENT '-1 is unknown (default)',
  `allowStacking` TINYINT(255) DEFAULT 0 COMMENT 'used for Arcanas and dragonclaw hooks and other non commodity items that we want to stack',
  `volume` INT(25) NOT NULL DEFAULT 0 COMMENT ' OPSkins 7-day price and volume ignores days without any sales. For most CS:GO items, this is the previous 7 days, but for rare or unpopular items, these sales can occur over the period of weeks or months.',
  `volumeLocal` INT(11) NOT NULL DEFAULT 0 COMMENT 'locally calculated sales volume of the item using multiple data sources',
  `volumeLocalMarketized` INT(11) NOT NULL DEFAULT 0 COMMENT 'volume column normalized to Steam market volumes',
  `volumeSA` INT(11) NOT NULL DEFAULT 0 COMMENT 'obsolete. SteamAnalyst',
  `volumeSCM` INT(11) NOT NULL DEFAULT 0 COMMENT 'obsolete. Approximate sales volume of the item on the Steam market',
  `volumeSCM30d` INT(11) NOT NULL DEFAULT 0,
  `normalized_mean` DECIMAL(7, 2) NOT NULL DEFAULT 0.00 COMMENT 'just copied from the latest itemhistory. Used for analysis',
  `normalized_meandate` DATE NOT NULL DEFAULT '0000-00-00',
  `currentlowest` DECIMAL(7, 2) NOT NULL DEFAULT 0.00 COMMENT 'used for analysis. Current lowest price (from whichever sources we choose in the calculation)',
  `price` DECIMAL(8, 2) NOT NULL DEFAULT -1.00 COMMENT 'Calculated price of this item. -1 if couldn''t be reliably calculated. Either priceSA or priceLocal',
  `externalPrice1` DECIMAL(8, 2) DEFAULT NULL,
  `externalPrice2` DECIMAL(8, 2) DEFAULT NULL,
  `lastSuccessfulPrice` DECIMAL(8, 2) DEFAULT NULL COMMENT 'This is used for inventory value calculations for items that don''t have a recent price',
  `priceLocal` DECIMAL(8, 2) NOT NULL DEFAULT 0.00 COMMENT 'The price we calculated ourself. We will use either this or priceSA for the actual item price in the price column',
  `priceLocalMarketized` DECIMAL(8, 2) NOT NULL DEFAULT 0.00,
  `priceSA` DECIMAL(8, 2) NOT NULL DEFAULT 0.00 COMMENT 'Our own price calculated from the steamanalyst API',
  `priceSCM` DECIMAL(8, 2) NOT NULL DEFAULT 0.00 COMMENT 'Our own price calculated from the Steam Community Market historical pricing data',
  `pricebtc` DECIMAL(7, 2) NOT NULL DEFAULT 0.00 COMMENT 'The instant purchase price of the item that we pay. we use a different calculation for calculating the btcprice than trading price',
  `overrideprice` DECIMAL(8, 2) DEFAULT NULL COMMENT 'we can set the price manually to override the calculated price by setting this field',
  `overridePriceValidTillTime` INT(10) UNSIGNED DEFAULT NULL COMMENT 'This is used so an old overrideprice won''t be forgotten. This is a timestamp typically 2-3 days from setting the price manually',
  `pricechange` DOUBLE NOT NULL DEFAULT -1 COMMENT 'calculated by comparing the current calculated price to the median price of a longer time span. -1 if couldn''t be reliably calculated',
  `volatility` DOUBLE NOT NULL COMMENT 'the ratio between the lowest and highest normalized_min in the past 7 days',
  `saledaycount` SMALLINT(6) NOT NULL DEFAULT 0 COMMENT 'from the last X days how many days have had sales on opskins for this item. We get this by checking the itemhistory table',
  `volumedate` DATE NOT NULL DEFAULT '0000-00-00',
  `pricedate` DATE NOT NULL DEFAULT '0000-00-00',
  `boughttoday` INT(11) NOT NULL COMMENT 'how many of this item we have bought today. gets reset every 24 hours',
  `maxbuyperday` INT(11) NOT NULL DEFAULT 10 COMMENT '-1 means unlimited',
  `maxstock` INT(11) NOT NULL COMMENT '-1 means unlimited. How many of this item we can have in stock on the tradebot at once. Limits the amount users can trade in',
  `pricinggroup` TINYINT(4) NOT NULL DEFAULT 0 COMMENT 'Which pricing calculation group to be used for this item. Used so we can have different pricing for keys. 0 means default pricing by price',
  `disablebuy` TINYINT(4) NOT NULL DEFAULT 0 COMMENT '1 if this item isn''t allowed to be traded into the tradebot or sold',
  `disallowListingOnMarketplace` TINYINT(255) NOT NULL DEFAULT 0,
  `disableAutobuy` TINYINT(255) DEFAULT 0,
  `phasegroup` TINYINT(4) UNSIGNED NOT NULL DEFAULT 0 COMMENT 'If this item has phases and should be inspected before we can trade it out;',
  `pricecomparison` DECIMAL(8, 2) NOT NULL DEFAULT 0.00 COMMENT 'used temporarily when comparing our price with something else',
  `priceModifier` FLOAT NOT NULL DEFAULT 0 COMMENT 'If not set, multiply the price by 1+this to get the final price',
  `canBeNonMarketable` TINYINT(255) NOT NULL DEFAULT 0 COMMENT 'If we see this item and it''s not marketable, then set this flag so we know to use different kind of pricing. Sometimes items with the same name can be both marketable and non marketable, where the old items on the market will be overpriced',
  `expirationTime` INT(255) DEFAULT NULL COMMENT 'If this is an expiring item, this will be the timestamp when it will expire. If it''s not an expiring item, this will be 0. If it''s not yet determined (item not seen yet), it''s NULL',
  `ispriceunstable` TINYINT(4) NOT NULL DEFAULT 0 COMMENT 'flag if the price is unstable. Set when recalculating prices. Can be set when the price is dropping for example',
  `stabilityScore` FLOAT UNSIGNED NOT NULL DEFAULT 0 COMMENT 'stability of the price. local calculation',
  `disableExternalSell` TINYINT(4) NOT NULL DEFAULT 0 COMMENT 'obsolete. Do not sell this item on OPskins',
  `type` VARCHAR(64) CHARACTER SET utf8mb3 COLLATE utf8mb3_unicode_ci DEFAULT NULL COMMENT 'from Steam item description',
  `overridemaxstock` INT(11) DEFAULT NULL COMMENT 'if this is set, maxstock will be set to this instead of the calculated one',
  `unstablereason` VARCHAR(1024) DEFAULT '' COMMENT 'The reason why the calculated price was determined to be unstable',
  `finalPrice` DECIMAL(8, 2) GENERATED ALWAYS AS (if(`overrideprice` >= 0,`overrideprice`,`price`)) STORED COMMENT 'Helps with price calculations. It is overrideprice if it is set, otherwise `price`',
  `doNotFetchSCMPrice` TINYINT(10) DEFAULT 0 COMMENT 'Used if this item can''t be found on the SCM for a specific length of time',
  `doNotFetchBuffPrice` TINYINT(10) DEFAULT 0,
  `canUsePriceAsSuggestion` TINYINT(255) DEFAULT 0 COMMENT 'If we can use this price for calculating discounts',
  `liquidity` FLOAT DEFAULT 0,
  `trade_bot_buy_price` DECIMAL(8, 2) NOT NULL DEFAULT 0.00,
  `trade_bot_sell_price` DECIMAL(8, 2) NOT NULL DEFAULT 0.00,
  PRIMARY KEY (id, appid, contextid),
  INDEX id(id)
)
ENGINE = INNODB,
CHARACTER SET latin1,
COLLATE latin1_swedish_ci,
COMMENT = 'Data for distinct Steam game/app items';

ALTER TABLE `items` 
  ADD UNIQUE INDEX uniq(marketname, appid, contextid);

ALTER TABLE `items` 
  ADD INDEX iconpath(iconpath) COMMENT 'Used to delete unused item image files';

ALTER TABLE `items` 
  ADD FULLTEXT INDEX IDX_items_market_hash_name(market_hash_name);